{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Calibri;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red45\green59\blue69;\red5\green99\blue193;}
{\*\expandedcolortbl;;\csgenericrgb\c17647\c23137\c27059;\csgenericrgb\c1961\c38824\c75686;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\info
{\author Eric Zorn}
{\*\company Quinnipiac University}}\margl1440\margr1440\vieww12540\viewh16080\viewkind1\viewscale120
\deftab720
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0

\f0\fs22 \cf0  Eric Zorn\
2/19/18\
ICT 4370\
Module 8\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\qc\partightenfactor0

\b \cf0 \ul \ulc0 ICT 4370 Discussion Post Module 8\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0

\f1 \cf2 \ulnone Compare Django with another Python web framework. You will not have the time to develop anything with a different framework, but take a look at the documentation, reviews, and potentially sites that have been developed with the different frameworks. Describe the pros and cons of the different frameworks, including differences in the development process and the outcomes.\
\pard\pardeftab720\li720\fi-360\ri0\sl259\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\b0 \cf2 -	
\f0 \cf0 Other than Django, there are many other popular frameworks that are used for the web and are built off of the Python programming language. In this course, we are covering the Django framework, due to its popularity and strict guidelines that need to be filled. There are many other frameworks that are build off of Python, however, Flask and Django are the two most popular Python web frameworks. Many developers prefer to use the Django framework over other framework, due to its unique command line interface and the implementation of a strict MVC (Model View Controller) base. Each of the files is separated. One file, known as models.py is used to build Python classes that will then compile and render/interact with the different tables in the database. Django is also compatible with any Python compatible database. Originally, the project is set up to use a pre-installed SQLite database that we have been using. This database is lightweight and can be viewed on the client without needing a server to run. Django also comes with a friendly to use CLI (Command Line Interface), which we have been using in this week\'92s assignment. It allows for database migrations, app creation, running the server, creating projects within a directory and many more items. The benefit to using Django is also the fact that it has a built in CMS (Content Management System) that is attached to a preinstalled admin application/view within the project. Therefore, this framework is very quickly scalable for large userbase. This however can be a large learning curve for many people to be able to understand complex routing, database migrations, and models. Once the user understands these concepts, it becomes much easier to build applications and can happen quite rapidly.\ul \
\ls1\ilvl0
\f1 \cf2 \ulnone -	
\f0 \cf0 Now that we have a little bit of a background of Django and the pros and cons of the framework, let\'92s begin speaking about Flask. On the Flask website, it defines itself as a micro-framework for Python that is easily scalable and easy to setup. Both of these frameworks , Django and Flask, depend on the framework being installed to the Python directory first by using PIP. Also, both frameworks do support Python 2, but rely on Python 3 for most of their proper and modern functionalities for each application that is being built. Once the framework has been properly installed using pip, Flask is much simpler to understand out of the box than Django may be. A developer would simply import the Flask class from the flask module at the top of the script. Then, the developer will assign the Flask(__name__) method and class to a variable, commonly titled app. To use the app variable and build an application that renders a string is simple. There are only two more steps that are needed. Now that we have the app variable, we would write an @app.route(\'91/\'92) decorator to define where the following function is going to return a view. A route in most frameworks is essentially the file path to the application when the user visits a page or another module in the application. The \'91/\'92 symbol means the root folder. Underneath this route, the developer will define a function that does not need any parameters. The function then can return something as simple as a string that says \'93Hello, world\'94. These functions can take in parameters which will create dynamic content output within the functions as well. Like we have done in the past, the developer will call the app within the code block of if __name__ == \'93__main__\'94. Instead of using the function main() or code_run() like in the past assignments, we will use the run method by calling app.run(). This method will compile the application and render the views and routes via a local web server on your computer. The developer can then finally go to the right URL with the correct specified port and view the output from each of the function\'92s return statements. In this case, the string returned would just display \'93Hello, World!\'94 to the browser. Much like Django, Flask allows for the use of templates in order to render dynamic HTML content. This would be an imported function known as render_template(). Flask also offers unique capabilities for file uploading as well with HTTP protocol handlers. The function will handle incoming upload files from the form and then save them to a specified directory. Flask can also handle other HTTP protocols like cookies as well and sessions that otherwise would be handled with languages like PHP. There also different ways to handle routing with concepts like error handling. If the user were to receive an error like 401 or 404, the page would redirect the user to the right url that will be found within the browser page. These are handled with the errorhandlermethod that would be added to the @app decorator. As mentioned above, Flask can handle relatively common HTTP protocol like sessions and cookies that are often used to store information about the browser or user\'92s input. Location may be stored as well for future use within the application.  A very important topic that would be able to be covered in another lecture and is imperative to know about web development is the lengthy list of HTTP protocols.  The most popular of these entail GET, HEAD, POST, PUT, DELETE, and OPTIONS. Each of these interact with data and the server, but are different and are used for very different purposes when building an application. Lastly, like Django, Flask allows for static files like CSS or even JavaScript files. The files will be defined in a directory known as /static/ and then referred to by the url_for() function. Both frameworks are very similar, although Django has many other features that are built in, such as the CMS and admin panel that flask does not come with automatically. The benefit to Django for many people is also that the framework already generates the proper files to construct views, templates, models and even will come standard with a database. For a larger scaled application however, using MySQL or Postgres is going to be more common than using SQLite. Developers also often like the built CLI that Django has incorporated. Another benefit about both frameworks is the incorporation of the Templating language that allows for looping over data and outputting retrieved values from the database. Many developers prefer Flask for very small web projects and prefer Django for larger scaled projects. Both frameworks are said to be much easier to learn than using the .NET framework or some other JavaScript frameworks like Angular and React. All frameworks that have been mentioned \ul \
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0

\b \cf0 \ulc0 Links:\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0
{\field{\*\fldinst{HYPERLINK "%22"}}{\fldrslt 
\b0 \cf3 \ulc3 http://stackabuse.com/flask-vs-django/}}
\b0 \ulnone  \
{\field{\*\fldinst{HYPERLINK "%22"}}{\fldrslt \cf3 \ul \ulc3 http://flask.pocoo.org/docs/0.12/quickstart/#rendering-templates}}\
{\field{\*\fldinst{HYPERLINK "%22"}}{\fldrslt \cf3 \ul \ulc3 https://docs.djangoproject.com/en/2.0/}} \
{\field{\*\fldinst{HYPERLINK "%22"}}{\fldrslt \cf3 \ul \ulc3 https://realpython.com/blog/python/flask-by-example-part-1-project-setup/}}\
{\field{\*\fldinst{HYPERLINK "%22"}}{\fldrslt \cf3 \ul \ulc3 https://realpython.com/blog/python/flask-by-example-part-1-project-setup/}}\
\
\
}