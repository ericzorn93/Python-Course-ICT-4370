{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww14160\viewh16080\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
1) What is\'a0Model-View-Controller (MVC)? Try to find a website that uses MVC principles and provide the link.\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}
\b0 The MVC or Model View Controller defines a design pattern that will assign objects in an application to one of three different roles, the Model, the View, or the Controller. Each of these different parts of the design pattern will relate to a different aspect of the program. Each of the three objects in the design framework are kept separate from one another, but will be able to interact with one another as needed, in order to create a functioning application.  The model corresponds to all data related logic that the user will be working with. This can interact with data being transferred from the view and the controller, or any other specified business logic related data in the program. This allows for integration into the database as well. The model will retrieve information from the controller or the database and will either render it back into the database or pass the information out to the controller. The controller will interface as the middle man between the model and view. The model will never have a direct interaction with the view if this is programmed correctly. The controller processes all incoming data requests from the view or the model and performs the proper logic. The controller will then output that data to the model to be rendered on the server or in the database, and or, will send the info to be rendered and displayed in the view to the user. Lastly, is the view. The view is used to render all of the proper UI logic of the application and display the necessary data and UI components. These may consist of text boxes, dropdown, and any other components like styling. The components with MVC frameworks can also dynamically change and update with proper routing logic. Routes are essentially defining the correct file path to a certain view. A common website that most people have or currently use with MVC would be Facebook. Each of the components on the Facebook website operate independently. There is the main newsfeed, the navigation bar, the user profile, and the comment section per post, and the instant messenger application. Although all of these components appear to be operating cohesively, they are dynamically updating and rendering as separate mini applications. An example of this would be the notification bar informing the user of an incoming notification, while the user is browsing his/her newsfeed and also sending an instant message. What allows a dynamic website like this is the ability for components or small applications. Their website is built on their own framework (some argue library), known as React. React, unlike Django, has been built from JavaScript. However, React, Django, Angular, Ruby on Rails, Laravel, and many other frameworks utilize the same methodology of MVC to ensure separation of logic and data. With facebook, each of these mini components on the webpage are most likely interfacing with separate tables or databases as a whole at the same time and dynamically update the UI depending on the logged in user. For example, my friends list and newsfeed would not be identical to another user. This is where using MVC is so powerful. In fact, many frameworks like Django, incorporate built in functionality for security and classes for handling data with models. \
\ls1\ilvl0
\b {\listtext	\uc0\u8259 	}Links: {\field{\*\fldinst{HYPERLINK "https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm"}}{\fldrslt 
\b0 https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm}}
\b0 , {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html"}}{\fldrslt https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html}}, {\field{\*\fldinst{HYPERLINK "https://reactjs.org/"}}{\fldrslt https://reactjs.org/}}, {\field{\*\fldinst{HYPERLINK "https://angularjs.org/"}}{\fldrslt https://angularjs.org/}}, {\field{\*\fldinst{HYPERLINK "https://www.djangoproject.com/"}}{\fldrslt https://www.djangoproject.com/}}
\b \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Pasted Graphic.tiff \width7950 \height3450 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}}