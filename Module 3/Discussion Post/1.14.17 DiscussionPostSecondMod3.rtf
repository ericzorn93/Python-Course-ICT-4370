{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww13560\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
1) Do you have any suggestions for the course? How do you like the videos, and discussion posts?\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}
\b0 I definitely have liked the videos and the discussion posts so far in the course. I would like a little further clarification on dictionaries with nested lists, dictionaries and loops. I have a strong understanding of both of these concepts, but would definitely like a little further clarification on these topics. I personally have been really enjoying the course and have learned a lot about the Python programming language. It has been a fairly easy transition from the JavaScript programming language, however there still is so much to learn. Being able to import different modules and libraries can make your Python program very powerful and manipulate data in a much easier way. Understanding how the original form of Python is used is more important before diving into any library or framework. This is why this course has been very helpful so far. I look forward to learning more!\
\pard\tx720\pardeftab720\partightenfactor0

\b \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \expnd0\expndtw0\kerning0
2) Please explain this code in your own words. What is happening with I and J?\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}
\b0 The variables I and J in this example vary in scope and do different tasks within these different loops. First, the I variable is used as the iterator within the for loop that counts within a range from 0, 1, 2. The first print statement is stating the letter i in a string and then printing the number that i is equal to within the loop. Second, the variable J is declared and set equal to zero. The nested while loop begins as the first iteration of the for loop is executed. It keeps the total at zero for the first iteration and adds one to the J variable. It then prints the number one. The total variable is then accessed in the global scope and prints the number one. Each time the for loop is executed, the while loop is executed as well. It runs through and sets the iterator J to 3. When the for loop is executed the second time, the letter I iterator is increased to 1, while the letter J is incremented to four and then finally six on the last iterations of the loop. The while loop is executed three times before the for loop  is executed the second time. This is because of the while loop being nested within the for loop.
\b \expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 3) What is the difference between print and return? Why would you want to return a value from a function?\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}
\b0 Print and return are similar but different in the Python programming languages. A stack overflow definition states that the print() function takes in arguments or expressions, which will then dump them into standard outputs. Return does not provide a visual output on the other hand. Return also is not a function. Instead, it is just a statement and does not receive any arguments. In Python 2, print was used more as a statement, but with the introduction of Python 3, the print statement became a function that is built in to the language. Print will always 
\i \cf2 return 
\i0 \cf2 a value visually to the screen via the terminal or a UI. Print also will not affect a function and is simply just an example for the developer to see the final outcome of a variable or even a function. It can be used often as part of the functionality of a program or even a debugging method like console.log() in JavaScript. Return \expnd0\expndtw0\kerning0
on the other hand, is the way that the a function will return a value. That value can often be assigned to a variable for future use outside of the function scope. If there is no specified return or yield value within a function, every function will return the default value of None. The returned value can also be used as an argument that is passed to a different function or even printed as well. Although both of these methods seem similar, the return method tends to be much more powerful when building dynamic and lengthy Python applications that incorporate many functions to calculate different values.\
\pard\pardeftab720\partightenfactor0

\b \cf2 \
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \kerning1\expnd0\expndtw0 \strike \strikec0 4) Make a list called sandwich_orders and fill in with the names of various sandwiches. Then make an empty list called finished_sandwiches. Loop through the list of the sandwich order and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made.\
\
5) Using the list sandwich_orders previously created make sure the sandwich \'91pastrami\'92 appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, from sandwich_orders. Make sure no pastrami sandwiches end up in finished_sandwiches.}