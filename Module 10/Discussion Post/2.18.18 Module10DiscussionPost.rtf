{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww20000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the first week you described an application/program you would like to develop. Now that you have done some programming, can you estimate how difficult it would be? How long it would take you? Would you know where to start? Do you have enough knowledge to develop the entire application, or are there things you would like to learn? Then, provide feedback on your classmate's self-assessments. Are they missing anything? What advice might you give them in embarking on their own projects?\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 Please post your Django project idea.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}
\b0 Looking back on the first week of class this semester has already felt like it has been a while back. My original idea for an application or a Python script has been implemented, by many different technology companies/email providers at this point. It definitely has some room to grow. My idea for an application was originally for an email sorting script that would be able to sort through incoming email messages in a user\'92s inbox and sort the emails into different folders according to their genre. Also, the script would be able to examine the date of the email. If the email was a designated amount of days, months or weeks old (assigned by the user) the script would be able to automatically throw the email into the trash and permanently delete these messages from the server. This would enable users to be able to sort through email more efficiently and to ensure that their email provider\'92s servers were not being weighed down by useless messages at this point. Many cloud based services prefer to charge the user more money for further cloud storage. If the user was able to create and deploy this script to each of their email accounts, making it universal across providers and browsers, they would significantly better their email browsing experience and response rate to emails that otherwise may have been lost. With this said, I would estimate that this application/program would take quite a while to be able to fully build. This would be due to the need for a heavy backend and most likely, server-side scripting to be able to read through incoming and outgoing messages, as well as reading through the database of emails. The program would then need to parse through the information of the email and determine the information like the genre, the posted incoming date, and the email contents. Then, logic would need to be performed to determine what to do with the email at that point, meaning to keep and sort or delete the email in the trash. This script would also need to be compatible with many different mail servers and protocols, depending on the email provider, which would most likely be difficult as well. For me personally, this type of application is easy for me to understand and would be fairly easy for me to draw the logic. However, this would be very difficult for me to implement into code, only due to the server-side scripting and some of the back-end database functionality. However, this course has helped me understand implementing a back-end to an application quite well and has helped me understand using relational databases and database theory from the last few assignments. For this specific application, it would most likely take me a while to develop, and there would be plenty more for me to learn, due to its complexity. I would imagine that using Python, would enable the user to bring in other data sorting modules that might help cut the amount of code that needs to be written and handle data in a simpler way than vanilla Python. We definitely have enough knowledge at this point how to build the code on how to do this with reading in and editing or writing to files. We also have learned how to use a database as well and integrate storing and reading through this information. However, using an application on this scale may be slightly more difficult. If I was able to go back to the drawing board, I would definitely come up with an interactive application for the user, that it would involve a dynamic front-end (UI) as well. Django is perfect for this and is being used by many large companies like Instagram, YouTube, Dropbox, Google, Quora, Spotify, Reddit, Yahoo Maps, and many others.\
\ls1\ilvl0
\b {\listtext	\uc0\u8259 	}
\b0 For my Django web application, I would like to create a dynamic web application that will be based on the user\'92s location. The application would find libraries, caf\'e9s, and study/work locations. The application would use the Google Maps API to bring in map information and Google\'92s location services as well as custom styling. The user would be able to login and get directions to one of these work/study locations, as well as view menus (if food is served), reserve seating, gain directions and any other standard map functionality. In addition to the map, the user would be able to check the weather for their location and destination to ensure proper planning. The other part of the application would be a study helper. It would allow the user to store a to-do checklist, notes, code, images, and videos. Voice recordings would be allowed as well for future listening. There would also be an online forum for the users to be able to reach out and ask questions on specific school or work topics in which they are working on. Lastly, there would be an integrated group chat, video calling and audio calling feature, as well as screen sharing, for team collaboration and travel planning. There are many applications on the app store and the internet that have many of these features, but I do not believe that there is any application that integrates each of these features. It would be a a much easier and integrated experience for the user to have access to all of these features in one application. Also, with APIs, the developer would be able to integrate features from social media or other software if the API is available through that company and software. Although this would be a very difficult application to design, It would definitely be something that I would use as a student or an employee that works often in teams. Using Django to integrate a full-stack framework would be perfect for this application. In order to make the most of the user experience, I would also make the interface responsive for all mobile phones and tablets. I think a good name for this application would be 
\b BusyBee
\b0 .
\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}