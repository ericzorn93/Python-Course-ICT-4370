{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red255\green255\blue255;\red109\green109\blue109;
\red32\green32\blue32;\red191\green100\blue38;\red153\green168\blue186;\red117\green114\blue185;\red160\green0\blue163;
\red128\green63\blue122;\red254\green187\blue91;\red88\green118\blue71;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c42745\c42745\c42745;
\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c62745\c0\c63922;
\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c34510\c46275\c27843;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Why do classes exist and what is the purpose of a class? In programming what does a class allow us to do?\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}
\b0 Python\'92s documentation describes classes as a means of bundling data and functionality together into one code block. Creating a new class is creating a new type of object, allowing new instances of that type to be made. The paragraph also mentions that each class instance contains attributes and methods that can maintain its state. In other programming languages, these different attributes might also be referred to as properties. Essentially, classes are similar to functions and can continuously be reused. Classes also create an idea known as inheritance involving parent and children classes. An example of this might be an animal class. Every animal that inherits from the animal class will share the same overall animal properties and methods. However, every child/sub-class will have its own properties and methods. The animal class might have attributes like eyes, mouth, ears, hair, etc. If the developer creates a class called dog, the dog class will share all of the same attributes as the animal class, but can also have some of its own. These may be a tail, breed, size, etc. Each class instance is created and stored into a variable. The syntax may look something like snowball = Dog(). Now, the variable snowball has all of the methods and attributes from the dog class and the animal class, due to its inheritance. It is common to draw these inheritances out in the forms of diagrams, known as UML or the Unified Modeling Language. Instead of writing the same code multiple times and defying the DRY methodology, using classes creates an object-oriented code structure. It simply allows every object to be initiated from the same class but have its own attribute and method values. This is very popular in the development industry and is the main focus of most any modern programming language. Just like functions, classes have scope. Any attributes that are not defined in the main __init__ method, will fall into a different method\'92s internal scope, thus making them inaccessible outside of that scope. Here is an example below. Every object takes in the self keyword, which stands for the object it is being assigned to. In the example below, self would stand for Spike, due to that being the instance of the Animal class being used. Attributes in a class are often taken in as a parameter and are assigned to a variable that begins with \'93self.\'94. Methods are written as standard functions inside of a class, but can take in other parameters. However, self, always should be the first parameter passed in each method. Classes can also take in different decorators like @classmethod and @staticmethod which will define the types of methods and attributes that are being used in that class. Using object-oriented programming is very powerful and can completely change the way that programmers write programs. When initializing classes, as seen by the examples, much less code will need to be written. Just remember, always include the def __init__(self): method. This is known as the class constructor and is used in most major programming languages for classes. If this constructor function is not there, the code will not successfully execute. \
\pard\tx720\pardeftab720\sl360\partightenfactor0

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
Answers to Number 2 and 3, as well as the examples are below.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf4 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 # Example 1: Animal Class\
\cf6 class \cf7 Animal(\cf8 object\cf7 ):\
    \cf6 def \cf9 __init__\cf7 (\cf10 self\cf6 , \cf7 species\cf6 , \cf7 color):\
        \cf10 self\cf7 .species = species\
        \cf10 self\cf7 .color = color\
\
    \cf6 def \cf11 fullInfo\cf7 (\cf10 self\cf7 ):\
        \cf8 print\cf7 (\cf12 "The animal is a \{0\} and is the color \{1\}."\cf7 .format(\cf10 self\cf7 .species\cf6 , \cf10 self\cf7 .color))\
\
\
dog = Animal(\cf12 "dog"\cf6 , \cf12 "white"\cf7 )\
\
\cf8 print\cf7 (dog.fullInfo())\
\
\
\cf4 # Example 2: Restaurant Class\
\cf6 class \cf7 Restaurant:\
    \cf6 def \cf9 __init__\cf7 (\cf10 self\cf6 , \cf7 restaurant_name\cf6 , \cf7 cuisine_type):\
        \cf4 # Attributes\
        \cf10 self\cf7 .restaurant_name = restaurant_name\
        \cf10 self\cf7 .cuisine_type = cuisine_type\
\
    \cf4 # Methods\
    \cf6 def \cf11 describe_restaurant\cf7 (\cf10 self\cf7 ):\
            \cf8 print\cf7 (\cf12 "\{0\} serves \{1\} food."\cf7 .format(\cf10 self\cf7 .restaurant_name\cf6 , \cf10 self\cf7 .cuisine_type))\
\
    \cf6 def \cf11 open_restaurant\cf7 (\cf10 self\cf7 ):\
        \cf8 print\cf7 (\cf12 "\{0\} is open for business!"\cf7 .format(\cf10 self\cf7 .restaurant_name))\
\
\
pizza = Restaurant(\cf12 "Pepe's Pizzeria"\cf6 , \cf12 "pizza"\cf7 )\
\cf8 print\cf7 (pizza.restaurant_name)\
\cf8 print\cf7 (pizza.cuisine_type)\
\cf8 print\cf7 (pizza.describe_restaurant())\
\cf8 print\cf7 (pizza.open_restaurant())\
\
\
\cf4 # Example 3: Building Upon Restaurant Class with different Instances\
\cf7 japanese = Restaurant(\cf12 "Kazuki"\cf6 , \cf12 "japanese"\cf7 )\
mexican = Restaurant(\cf12 "Burrito King"\cf6 , \cf12 "mexican"\cf7 )\
thai = Restaurant(\cf12 "Pho Real"\cf6 , \cf12 "thai"\cf7 )\
\
\cf8 print\cf7 (japanese.describe_restaurant())\
\cf8 print\cf7 (mexican.describe_restaurant())\
\cf8 print\cf7 (thai.describe_restaurant())\
\pard\tx720\pardeftab720\sl360\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}